# =====================================
# Solutio 360 PWA Docker Compose
# =====================================
# Production-ready containerized deployment
# Inspired by enterprise containerization best practices

version: '3.8'

services:
  # =====================================
  # Database Service
  # =====================================
  db:
    image: postgres:15-alpine
    container_name: solutio360_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-solutio360}
      POSTGRES_USER: ${POSTGRES_USER:-solutio360}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Redis Service (Cache & Sessions)
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: solutio360_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Elasticsearch (Search & Analytics)
  # =====================================
  elasticsearch:
    image: elasticsearch:8.10.0
    container_name: solutio360_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Main Application Service
  # =====================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solutio360_web
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=solutio_360.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Celery Worker Service
  # =====================================
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solutio360_celery
    restart: unless-stopped
    command: celery -A solutio_360 worker -l info --concurrency=2
    depends_on:
      - db
      - redis
    environment:
      - DJANGO_SETTINGS_MODULE=solutio_360.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network

  # =====================================
  # Celery Beat Scheduler
  # =====================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solutio360_celery_beat
    restart: unless-stopped
    command: celery -A solutio_360 beat -l info
    depends_on:
      - db
      - redis
    environment:
      - DJANGO_SETTINGS_MODULE=solutio_360.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network

  # =====================================
  # Nginx Reverse Proxy
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: solutio360_nginx
    restart: unless-stopped
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - app-network

  # =====================================
  # Monitoring: Prometheus
  # =====================================
  prometheus:
    image: prom/prometheus:latest
    container_name: solutio360_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  # =====================================
  # Monitoring: Grafana
  # =====================================
  grafana:
    image: grafana/grafana:latest
    container_name: solutio360_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network

  # =====================================
  # Logging: ELK Stack - Elasticsearch (already defined above)
  # =====================================
  
  # =====================================
  # Logging: Logstash
  # =====================================
  logstash:
    image: logstash:8.10.0
    container_name: solutio360_logstash
    restart: unless-stopped
    depends_on:
      - elasticsearch
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/app/logs
    ports:
      - "5044:5044"
    networks:
      - app-network

  # =====================================
  # Logging: Kibana
  # =====================================
  kibana:
    image: kibana:8.10.0
    container_name: solutio360_kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network

# =====================================
# Named Volumes
# =====================================
volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:

# =====================================
# Networks
# =====================================
networks:
  app-network:
    driver: bridge 