"""
Django settings for solutio_360 project.

Solutio 360 PWA Projesi - Django Ayarları
==========================================

Bu dosya Django projesinin ana konfigürasyon dosyasıdır.
Tüm uygulama ayarları, güvenlik konfigürasyonları,
veritabanı bağlantıları ve diğer servis ayarları burada tanımlanır.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Environment değişkenlerini .env dosyasından yükle
load_dotenv()

# Proje root dizini - tüm path'ler bu dizine göre hesaplanır
BASE_DIR = Path(__file__).resolve().parent.parent


# =============================================================================
# GÜVENLİK AYARLARI
# =============================================================================

# SECURITY WARNING: keep the secret key used in production secret!
# Gizli anahtar - üretimde mutlaka değiştirilmeli ve gizli tutulmalı
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-(#sa*+t633##nnx0kf92827y*r@9pn!81l6(kvw^87r8*)fsg5",
)

# SECURITY WARNING: don't run with debug turned on in production!
# Debug modu - üretimde mutlaka False olmalı
DEBUG = os.getenv("DEBUG", "True") == "True"

# İzin verilen host'lar - üretimde belirli domain'ler olmalı
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")


# =============================================================================
# UYGULAMA TANIMLARI
# =============================================================================

INSTALLED_APPS = [
    # Django'nun varsayılan uygulamaları
    "django.contrib.admin",  # Admin paneli
    "django.contrib.auth",  # Kimlik doğrulama
    "django.contrib.contenttypes",  # İçerik türleri
    "django.contrib.sessions",  # Oturum yönetimi
    "django.contrib.messages",  # Mesaj framework'ü
    "django.contrib.staticfiles",  # Statik dosya yönetimi
    "django.contrib.sites",  # Multi-site desteği
    # Üçüncü parti uygulamalar
    "crispy_forms",  # Form styling
    "crispy_tailwind",  # Tailwind CSS entegrasyonu
    "django_filters",  # Filtreleme
    "django_tables2",  # Tablo görünümleri
    "widget_tweaks",  # Form widget'ları
    "import_export",  # Veri import/export
    "django_celery_results",  # Celery sonuç saklama
    "django_celery_beat",  # Celery zamanlanmış görevler
    "django_redis",  # Redis cache
    "storages",  # Dosya depolama
    "django_cleanup.apps.CleanupConfig",  # Dosya temizleme
    "allauth",  # Sosyal auth
    "allauth.account",  # Account yönetimi
    "allauth.socialaccount",  # Sosyal hesap auth
    "rest_framework",  # API framework
    "corsheaders",  # CORS handling
    "pwa",  # PWA desteği
    "tailwind",  # Tailwind CSS
    "compressor",  # CSS/JS sıkıştırma
    "sass_processor",  # SASS işleme
    "debug_toolbar",  # Debug toolbar
    "drf_yasg",  # API dokümantasyonu
    # Yerel uygulamalarımız
    "core.apps.CoreConfig",  # Temel işlevler
    "users.apps.UsersConfig",  # Kullanıcı yönetimi
    "complaints.apps.ComplaintsConfig",  # Şikayet sistemi
    "reports.apps.ReportsConfig",  # Raporlama
    "analytics.apps.AnalyticsConfig",  # ML ve Analytics
    "saas_features",  # SaaS features eklendi
]

# =============================================================================
# MIDDLEWARE AYARLARI
# =============================================================================

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Güvenlik
    "django.contrib.sessions.middleware.SessionMiddleware",  # Oturum
    "django.middleware.locale.LocaleMiddleware",  # Çoklu dil
    "corsheaders.middleware.CorsMiddleware",  # CORS
    "django.middleware.common.CommonMiddleware",  # Genel
    "django.middleware.csrf.CsrfViewMiddleware",  # CSRF koruması
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Auth
    "django.contrib.messages.middleware.MessageMiddleware",  # Mesajlar
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Clickjacking koruması
    "allauth.account.middleware.AccountMiddleware",  # Account middleware
    "debug_toolbar.middleware.DebugToolbarMiddleware",  # Debug toolbar
]

# Ana URL konfigürasyonu
ROOT_URLCONF = "solutio_360.urls"

# =============================================================================
# TEMPLATE AYARLARI
# =============================================================================

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Template dizinleri
        "APP_DIRS": True,  # App içindeki template'leri bul
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

# WSGI uygulaması
WSGI_APPLICATION = "solutio_360.wsgi.application"


# =============================================================================
# VERİTABANI AYARLARI
# =============================================================================

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# =============================================================================
# PAROLA DOĞRULAMA
# =============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# =============================================================================
# ULUSLARARASILAŞTIRMA
# =============================================================================

# Varsayılan dil
LANGUAGE_CODE = "tr"

# Saat dilimi
TIME_ZONE = "Europe/Istanbul"

# Uluslararasılaştırma ve yerelleştirme
USE_I18N = True  # Çeviri desteği
USE_L10N = True  # Yerelleştirme
USE_TZ = True  # Saat dilimi desteği

# Desteklenen diller
LANGUAGES = [
    ("tr", "Türkçe"),
    ("en", "English"),
]

# Çeviri dosyaları dizini
LOCALE_PATHS = [
    BASE_DIR / "locale",
]

# =============================================================================
# STATİK DOSYALAR (CSS, JavaScript, Resimler)
# =============================================================================

STATIC_URL = "/static/"  # Statik dosya URL prefix'i
STATIC_ROOT = BASE_DIR / "staticfiles"  # Toplanan statik dosyalar
STATICFILES_DIRS = [BASE_DIR / "static"]  # Geliştirme statik dosyaları

# =============================================================================
# MEDYA DOSYALARI (Kullanıcı yüklemeleri)
# =============================================================================

MEDIA_URL = "/media/"  # Medya dosya URL prefix'i
MEDIA_ROOT = BASE_DIR / "media"  # Medya dosya dizini

# =============================================================================
# VERİTABANI
# =============================================================================

# Varsayılan birincil anahtar alanı
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# =============================================================================
# FORM AYARLARI
# =============================================================================

# Crispy Forms - Tailwind CSS kullan
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

# =============================================================================
# KİMLİK DOĞRULAMA
# =============================================================================

# Django AllAuth ayarları
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # Varsayılan
    "allauth.account.auth_backends.AuthenticationBackend",  # AllAuth
]

# Site ID (multi-site için)
SITE_ID = 1

# Account ayarları
# Deprecated allauth settings - replaced with new format
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Email doğrulaması zorunlu
LOGIN_REDIRECT_URL = "/"  # Giriş sonrası yönlendirme

# Email settings
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "smtp.gmail.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "your-email@gmail.com")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "your-app-password")

DEFAULT_FROM_EMAIL = "Solutio 360 <noreply@solutio360.com>"

# Celery settings
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "django-db"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# REST Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1"],
    "VERSION_PARAM": "version",
}

# JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "").split(",") if not DEBUG else []

# Security settings
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Custom user model
AUTH_USER_MODEL = "users.User"

# Allauth settings
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[Solutio 360] "

# Development settings for AllAuth
if DEBUG:
    ACCOUNT_EMAIL_VERIFICATION = "none"
    # These settings moved to line 244-245 with new format

# Cache settings
if DEBUG:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://localhost:6379/1",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "CONNECTION_POOL_CLASS": "redis.BlockingConnectionPool",
                "CONNECTION_POOL_CLASS_KWARGS": {
                    "max_connections": 50,
                    "timeout": 20,
                },
                "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
                "IGNORE_EXCEPTIONS": True,
            },
            "KEY_PREFIX": "solutio_360",
        }
    }

# Session settings
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Static files settings
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
    "sass_processor.finders.CssFinder",
]

# Compressor settings
COMPRESS_ENABLED = True
COMPRESS_CSS_FILTERS = [
    "compressor.filters.css_default.CssAbsoluteFilter",
    "compressor.filters.cssmin.CSSMinFilter",
]
COMPRESS_JS_FILTERS = [
    "compressor.filters.jsmin.JSMinFilter",
]

# Tailwind settings
TAILWIND_APP_NAME = "theme"
INTERNAL_IPS = [
    "127.0.0.1",
]

# Debug toolbar settings
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,
}

# Logging settings
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "solutio_360.log"),
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "solutio_360": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Create logs directory if it doesn't exist
if not os.path.exists(os.path.join(BASE_DIR, "logs")):
    os.makedirs(os.path.join(BASE_DIR, "logs"))
