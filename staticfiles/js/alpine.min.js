/*!
 * Alpine.js v3.13.3 - Simplified version for Solutio 360
 * Copyright 2021 Caleb Porzio and contributors
 */
(function() {
    'use strict';
    
    // Basit Alpine.js implementasyonu
    window.Alpine = {
        version: '3.13.3-simplified',
        
        // Alpine directives
        directives: {
            'x-data': handleXData,
            'x-show': handleXShow,
            'x-text': handleXText,
            'x-html': handleXHtml,
            'x-on': handleXOn,
            'x-bind': handleXBind,
            'x-if': handleXIf,
            'x-for': handleXFor,
            'x-model': handleXModel,
            'x-cloak': handleXCloak
        },
        
        // Initialize Alpine
        start: function() {
            document.addEventListener('DOMContentLoaded', () => {
                this.init();
            });
            
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => {
                    this.init();
                });
            } else {
                this.init();
            }
        },
        
        // Initialize all Alpine elements
        init: function() {
            this.initializeElements(document);
        },
        
        // Initialize elements in a container
        initializeElements: function(container) {
            const elements = container.querySelectorAll('[x-data]');
            elements.forEach(el => this.initializeElement(el));
        },
        
        // Initialize a single element
        initializeElement: function(element) {
            if (element._alpine) return;
            
            const dataAttr = element.getAttribute('x-data');
            let data = {};
            
            if (dataAttr) {
                try {
                    // Evaluate x-data attribute
                    data = new Function('return ' + dataAttr)();
                } catch (e) {
                    console.warn('Alpine.js: Error evaluating x-data', e);
                }
            }
            
            element._alpine = { data };
            
            // Process directives
            this.processDirectives(element);
            
            // Remove x-cloak
            element.removeAttribute('x-cloak');
        },
        
        // Process all directives on an element
        processDirectives: function(element) {
            const attributes = Array.from(element.attributes);
            
            attributes.forEach(attr => {
                const name = attr.name;
                const value = attr.value;
                
                if (name.startsWith('x-')) {
                    const directive = name.split('.')[0];
                    const handler = this.directives[directive];
                    
                    if (handler) {
                        handler(element, value, name);
                    }
                }
            });
            
            // Process child elements
            const children = element.querySelectorAll('[x-data]');
            children.forEach(child => this.initializeElement(child));
        }
    };
    
    // Directive handlers
    function handleXData(element, value) {
        // Already handled in initializeElement
    }
    
    function handleXShow(element, value) {
        const show = evaluateExpression(element, value);
        element.style.display = show ? '' : 'none';
    }
    
    function handleXText(element, value) {
        const text = evaluateExpression(element, value);
        element.textContent = text;
    }
    
    function handleXHtml(element, value) {
        const html = evaluateExpression(element, value);
        element.innerHTML = html;
    }
    
    function handleXOn(element, value, fullName) {
        const eventName = fullName.split('.')[1] || fullName.split(':')[1];
        if (!eventName) return;
        
        element.addEventListener(eventName, function(event) {
            evaluateExpression(element, value, { $event: event });
        });
    }
    
    function handleXBind(element, value, fullName) {
        const attrName = fullName.split(':')[1];
        if (!attrName) return;
        
        const attrValue = evaluateExpression(element, value);
        
        if (attrName === 'class') {
            if (typeof attrValue === 'object') {
                Object.keys(attrValue).forEach(className => {
                    if (attrValue[className]) {
                        element.classList.add(className);
                    } else {
                        element.classList.remove(className);
                    }
                });
            } else {
                element.className = attrValue;
            }
        } else {
            element.setAttribute(attrName, attrValue);
        }
    }
    
    function handleXIf(element, value) {
        const condition = evaluateExpression(element, value);
        const template = element.querySelector('template');
        
        if (condition && template) {
            const content = template.content.cloneNode(true);
            element.appendChild(content);
        } else {
            // Remove non-template children
            Array.from(element.children).forEach(child => {
                if (child.tagName !== 'TEMPLATE') {
                    child.remove();
                }
            });
        }
    }
    
    function handleXFor(element, value) {
        // Simplified x-for implementation
        const parts = value.split(' in ');
        if (parts.length !== 2) return;
        
        const itemName = parts[0].trim();
        const listName = parts[1].trim();
        const list = evaluateExpression(element, listName);
        
        const template = element.querySelector('template');
        if (!template || !Array.isArray(list)) return;
        
        // Clear existing content
        Array.from(element.children).forEach(child => {
            if (child.tagName !== 'TEMPLATE') {
                child.remove();
            }
        });
        
        // Create items
        list.forEach((item, index) => {
            const itemElement = template.content.cloneNode(true);
            // Set item data on first element
            const firstChild = itemElement.firstElementChild;
            if (firstChild) {
                firstChild._alpine = { 
                    data: { 
                        ...element._alpine.data, 
                        [itemName]: item, 
                        $index: index 
                    } 
                };
            }
            element.appendChild(itemElement);
        });
    }
    
    function handleXModel(element, value) {
        const updateValue = () => {
            const data = getElementData(element);
            const keys = value.split('.');
            let target = data;
            
            for (let i = 0; i < keys.length - 1; i++) {
                target = target[keys[i]];
            }
            
            if (element.type === 'checkbox') {
                target[keys[keys.length - 1]] = element.checked;
            } else {
                target[keys[keys.length - 1]] = element.value;
            }
        };
        
        element.addEventListener('input', updateValue);
        element.addEventListener('change', updateValue);
        
        // Set initial value
        const currentValue = evaluateExpression(element, value);
        if (element.type === 'checkbox') {
            element.checked = currentValue;
        } else {
            element.value = currentValue;
        }
    }
    
    function handleXCloak(element) {
        // Will be removed after initialization
    }
    
    // Helper functions
    function evaluateExpression(element, expression, additionalData = {}) {
        const data = { ...getElementData(element), ...additionalData };
        
        try {
            return new Function(...Object.keys(data), 'return ' + expression)(...Object.values(data));
        } catch (e) {
            console.warn('Alpine.js: Error evaluating expression', expression, e);
            return '';
        }
    }
    
    function getElementData(element) {
        let current = element;
        let data = {};
        
        while (current) {
            if (current._alpine && current._alpine.data) {
                data = { ...current._alpine.data, ...data };
            }
            current = current.parentElement;
        }
        
        return data;
    }
    
    // Auto-start Alpine
    Alpine.start();
    
})(); 