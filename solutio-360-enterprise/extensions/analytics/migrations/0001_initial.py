# Generated by Django 5.2.2 on 2025-06-22 18:15

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("complaints", "0006_remove_complaint_complaints__categor_82d134_idx_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MLModelState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "model_name",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Model Adı"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Aktif mi?"),
                ),
                (
                    "is_training",
                    models.BooleanField(
                        default=False, verbose_name="Eğitim halinde mi?"
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(default=dict, verbose_name="Model Parametreleri"),
                ),
                (
                    "weights_path",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Ağırlıklar Dosya Yolu"
                    ),
                ),
                (
                    "last_trained_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Son Eğitim Tarihi"
                    ),
                ),
                (
                    "last_updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Son Güncelleme Tarihi"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Oluşturulma Tarihi"
                    ),
                ),
            ],
            options={
                "verbose_name": "ML Model Durumu",
                "verbose_name_plural": "ML Model Durumları",
                "ordering": ["model_name"],
            },
        ),
        migrations.CreateModel(
            name="ModelPerformance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "model_name",
                    models.CharField(
                        choices=[
                            ("anomaly_detection", "Anomali Tespiti"),
                            ("sentiment_analysis", "Duygu Analizi"),
                            ("category_prediction", "Kategori Tahmini"),
                            ("resolution_prediction", "Çözüm Tahmini"),
                            ("incremental_classifier", "Artımlı Sınıflandırıcı"),
                            ("reinforcement_learning", "Pekiştirmeli Öğrenme"),
                        ],
                        max_length=50,
                        verbose_name="Model Adı",
                    ),
                ),
                (
                    "model_version",
                    models.CharField(
                        default="1.0.0", max_length=20, verbose_name="Model Versiyonu"
                    ),
                ),
                (
                    "accuracy",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Doğruluk (Accuracy)",
                    ),
                ),
                (
                    "precision",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Hassasiyet (Precision)",
                    ),
                ),
                (
                    "recall",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Geri Çağırma (Recall)",
                    ),
                ),
                (
                    "f1_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="F1 Skoru",
                    ),
                ),
                (
                    "training_samples",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Eğitim Örnek Sayısı"
                    ),
                ),
                (
                    "test_samples",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Test Örnek Sayısı"
                    ),
                ),
                (
                    "total_predictions",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Toplam Tahmin Sayısı"
                    ),
                ),
                (
                    "training_time_seconds",
                    models.FloatField(
                        default=0.0, verbose_name="Eğitim Süresi (saniye)"
                    ),
                ),
                (
                    "model_size_bytes",
                    models.PositiveBigIntegerField(
                        default=0, verbose_name="Model Boyutu (byte)"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Ek Veriler"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Kayıt Tarihi"
                    ),
                ),
            ],
            options={
                "verbose_name": "Model Performansı",
                "verbose_name_plural": "Model Performansları",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["model_name", "timestamp"],
                        name="analytics_m_model_n_f658af_idx",
                    ),
                    models.Index(
                        fields=["accuracy"], name="analytics_m_accurac_71973f_idx"
                    ),
                    models.Index(
                        fields=["timestamp"], name="analytics_m_timesta_9f409a_idx"
                    ),
                ],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("model_name", "model_version"),
                        name="unique_model_version_performance",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="AnomalyDetection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="Anomali Başlığı"),
                ),
                ("description", models.TextField(verbose_name="Açıklama")),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Düşük"),
                            ("medium", "Orta"),
                            ("high", "Yüksek"),
                            ("critical", "Kritik"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="Önem Derecesi",
                    ),
                ),
                (
                    "anomaly_score",
                    models.FloatField(
                        help_text="-1 ile 1 arasında anomali skoru",
                        validators=[
                            django.core.validators.MinValueValidator(-1.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Anomali Skoru",
                    ),
                ),
                (
                    "data_point",
                    models.JSONField(default=dict, verbose_name="Veri Noktası"),
                ),
                (
                    "detected_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Tespit Tarihi"
                    ),
                ),
                (
                    "is_resolved",
                    models.BooleanField(default=False, verbose_name="Çözüldü mü?"),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Çözülme Tarihi"
                    ),
                ),
                (
                    "complaint",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anomalies",
                        to="complaints.complaint",
                        verbose_name="İlgili Şikayet",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_anomalies",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Çözen Kullanıcı",
                    ),
                ),
            ],
            options={
                "verbose_name": "Anomali Tespiti",
                "verbose_name_plural": "Anomali Tespitleri",
                "ordering": ["-detected_at"],
                "indexes": [
                    models.Index(
                        fields=["detected_at", "severity"],
                        name="analytics_a_detecte_21c485_idx",
                    ),
                    models.Index(
                        fields=["is_resolved"], name="analytics_a_is_reso_5f8d45_idx"
                    ),
                    models.Index(
                        fields=["anomaly_score"], name="analytics_a_anomaly_92820b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MLInsight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Başlık")),
                ("description", models.TextField(verbose_name="Açıklama")),
                (
                    "insight_type",
                    models.CharField(
                        choices=[
                            ("prediction", "Tahmin"),
                            ("anomaly", "Anomali"),
                            ("trend", "Trend"),
                            ("optimization", "Optimizasyon"),
                            ("alert", "Uyarı"),
                        ],
                        default="prediction",
                        max_length=20,
                        verbose_name="Öngörü Türü",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Düşük"),
                            ("medium", "Orta"),
                            ("high", "Yüksek"),
                            ("critical", "Kritik"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="Öncelik",
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        help_text="0-100 arası güven skoru",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="Güven Skoru (%)",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Ek Veriler"
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        default="fas fa-lightbulb",
                        max_length=50,
                        verbose_name="İkon CSS Sınıfı",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Aktif mi?"),
                ),
                (
                    "is_applied",
                    models.BooleanField(default=False, verbose_name="Uygulandı mı?"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Oluşturulma Tarihi",
                    ),
                ),
                (
                    "applied_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Uygulanma Tarihi"
                    ),
                ),
                (
                    "dismissed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Reddedilme Tarihi"
                    ),
                ),
                (
                    "applied_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="applied_insights",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Uygulayan Kullanıcı",
                    ),
                ),
                (
                    "dismissed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dismissed_insights",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Reddeden Kullanıcı",
                    ),
                ),
            ],
            options={
                "verbose_name": "ML Öngörüsü",
                "verbose_name_plural": "ML Öngörüleri",
                "ordering": ["-created_at", "-confidence"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "created_at"],
                        name="analytics_m_is_acti_504c22_idx",
                    ),
                    models.Index(
                        fields=["priority", "confidence"],
                        name="analytics_m_priorit_346310_idx",
                    ),
                    models.Index(
                        fields=["insight_type"], name="analytics_m_insight_856fc6_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ReinforcementLearningLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "episode",
                    models.PositiveIntegerField(verbose_name="Episode Numarası"),
                ),
                ("step", models.PositiveIntegerField(verbose_name="Adım Numarası")),
                ("state", models.JSONField(verbose_name="Durum (State)")),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("assign_priority", "Öncelik Ataması"),
                            ("assign_category", "Kategori Ataması"),
                            ("estimate_resolution", "Çözüm Süresi Tahmini"),
                            ("escalation_decision", "Yükseltme Kararı"),
                            ("resource_allocation", "Kaynak Tahsisi"),
                        ],
                        max_length=30,
                        verbose_name="Eylem (Action)",
                    ),
                ),
                (
                    "action_value",
                    models.JSONField(default=dict, verbose_name="Eylem Değeri"),
                ),
                ("reward", models.FloatField(verbose_name="Ödül (Reward)")),
                (
                    "next_state",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Sonraki Durum"
                    ),
                ),
                (
                    "q_value",
                    models.FloatField(blank=True, null=True, verbose_name="Q-Değeri"),
                ),
                ("epsilon", models.FloatField(verbose_name="Epsilon Değeri")),
                ("is_exploration", models.BooleanField(verbose_name="Keşif mi?")),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Zaman Damgası"
                    ),
                ),
                (
                    "complaint",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rl_logs",
                        to="complaints.complaint",
                        verbose_name="İlgili Şikayet",
                    ),
                ),
            ],
            options={
                "verbose_name": "RL İşlem Kaydı",
                "verbose_name_plural": "RL İşlem Kayıtları",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["episode", "step"],
                        name="analytics_r_episode_21c29b_idx",
                    ),
                    models.Index(
                        fields=["action", "timestamp"],
                        name="analytics_r_action_6edd01_idx",
                    ),
                    models.Index(
                        fields=["reward"], name="analytics_r_reward_a64d2f_idx"
                    ),
                ],
            },
        ),
    ]
