version: '3.8'

# Solutio 360 - Production Docker Compose
# Tüm servislerin production konfigürasyonu

services:
  # PostgreSQL Veritabanı
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-solutio_360}
      POSTGRES_USER: ${DB_USER:-solutio_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - solutio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-solutio_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - solutio_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgres://${DB_USER:-solutio_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-solutio_360}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Django
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: False
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # Email
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: True
      
      # Security
      SECURE_SSL_REDIRECT: True
      SESSION_COOKIE_SECURE: True
      CSRF_COOKIE_SECURE: True
      
      # Sentry (Hata Takibi)
      SENTRY_DSN: ${SENTRY_DSN}
      
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
      - ./logs:/app/logs
    networks:
      - solutio_network
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (Arka Plan Görevleri)
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A solutio_360 worker --loglevel=info --concurrency=2
    depends_on:
      - db
      - redis
    environment:
      DATABASE_URL: postgres://${DB_USER:-solutio_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-solutio_360}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: False
    volumes:
      - media_files:/app/media
      - ./logs:/app/logs
    networks:
      - solutio_network

  # Celery Beat (Zamanlanmış Görevler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A solutio_360 beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - db
      - redis
    environment:
      DATABASE_URL: postgres://${DB_USER:-solutio_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-solutio_360}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: False
    volumes:
      - ./logs:/app/logs
    networks:
      - solutio_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/static:ro
      - media_files:/media:ro
    networks:
      - solutio_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - solutio_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - solutio_network

  # Log Management with ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: unless-stopped
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - solutio_network
    profiles:
      - monitoring

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    restart: unless-stopped
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    networks:
      - solutio_network
    profiles:
      - monitoring

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - solutio_network
    profiles:
      - monitoring

# Persistent Volumes
volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

# Networks
networks:
  solutio_network:
    driver: bridge 